import { useState } from "react";
import Head from "next/head";
import Image from "next/image";
import { ApolloClient, InMemoryCache, gql } from "@apollo/client";

import SearchForm from "../components/SearchForm";
import Characters from "../components/Characters";
import styles from "../styles/Home.module.css";

export default function Home(props) {
  const initialState = props.results;
  const [characters, setCharacters] = useState(initialState);

  return (
    <div className={styles.container}>
      <Head>
        <title>The Rick and Morty API</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <SearchForm
          setCharacters={setCharacters}
          initialCharacters={initialState}
        />
        <h1 className={styles.title}>The Rick and Morty API</h1>

        <Characters characters={characters} />
      </main>
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

export async function getStaticProps() {
  const client = new ApolloClient({
    uri: "https://rickandmortyapi.com/graphql",
    cache: new InMemoryCache()
  });

  const { data } = await client.query({
    query: gql`
      query {
        characters(page: 1) {
          info {
            count
            pages
          }
          results {
            name
            id
            location {
              name
              id
            }
            image
            origin {
              name
              id
            }
            episode {
              id
              episode
              air_date
            }
          }
        }
      }
    `
  });

  return {
    props: { results: data.characters.results }
  };
}
